<?xml version="1.0" encoding="UTF-8"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one
	or more contributor license agreements. See the NOTICE file
	distributed with this work for additional information
	regarding copyright ownership. The ASF licenses this file
	to you under the Apache License, Version 2.0 (the
	"License"); you may not use this file except in compliance
	with the License. You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing,
	software distributed under the License is distributed on an
	"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, either express or implied. See the License for the
	specific language governing permissions and limitations
	under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:osgi="http://www.springframework.org/schema/osgi"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd             http://www.springframework.org/schema/beans             http://www.springframework.org/schema/beans/spring-beans.xsd             http://www.springframework.org/schema/osgi             http://www.springframework.org/schema/osgi/spring-osgi.xsd             http://camel.apache.org/schema/cxf             http://camel.apache.org/schema/cxf/camel-cxf-spring.xsd             http://camel.apache.org/schema/spring             http://camel.apache.org/schema/spring/camel-spring.xsd          http://activemq.apache.org/schema/core          http://activemq.apache.org/schema/core/activemq-core.xsd">
    <!-- Jaxb provider for the cxfrs client/server -->
    <bean class="org.apache.cxf.jaxrs.provider.JAXBElementProvider" id="jaxbProvider">
        <property name="schemaLocations" ref="schemaHolder"/>
    </bean>
    <util:list id="schemaHolder">
        <value>classpath:META-INF/xsd/mdm.xsd</value>
    </util:list>
    <!-- REST ENPOINT IMPLEMENTATION -->
    <bean class="com.customer.inbound.service.CustomerRestImpl" id="customerRestImplBean"/>
    <cxf:rsServer address="http://localhost:9191/rest"
        id="customerRestService" loggingFeatureEnabled="true" serviceClass="com.customer.inbound.service.CustomerRestImpl">
        <cxf:providers>
            <ref bean="jaxbProvider"/>
        </cxf:providers>
    </cxf:rsServer>
    <cxf:rsClient address="http://localhost:9191/rest"
        id="customerRestServiceClient" loggingFeatureEnabled="true" serviceClass="com.customer.inbound.service.CustomerRest">
        <cxf:providers>
            <ref bean="jaxbProvider"/>
        </cxf:providers>
    </cxf:rsClient>
    <!-- ActiveMQ Broker -->
    <broker brokerName="inboundBroker" persistent="true" useJmx="true" xmlns="http://activemq.apache.org/schema/core">
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
        </transportConnectors>
        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean class="org.apache.activemq.hooks.SpringContextHook" xmlns="http://www.springframework.org/schema/beans"/>
        </shutdownHooks>
    </broker>
    <!-- JMS ConnectionFactory  -->
    <bean class="org.apache.activemq.ActiveMQConnectionFactory" id="jmsConnectionFactory"/>
    <!-- ActiveMQ Camel Component - No Tx -->
    <bean class="org.apache.activemq.camel.component.ActiveMQComponent" id="amq-notx">
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>
    <bean class="com.customer.inbound.routing.InboundRouteBuilder" id="inboundRouteBuilder"/>
    <camelContext id="camelContext-20bfdf3f-bb50-4ba3-b48d-7299441206a3" xmlns="http://camel.apache.org/schema/spring">
        <!-- Java DSL defined CXFRS endpoint, this is the "meat" of the logic -->
        <routeBuilder ref="inboundRouteBuilder"/>
        <!-- Direct endpoint that packages an exchange and sends it to the cxfrs service 
        		This is where the test module sends exchanges to-->
        <route id="_route5">
            <from id="_from5" uri="direct:callRestEndpoint"/>
            <to id="_to1" uri="log:com.mycompany.order?level=DEBUG"/>
            <log id="_log2" message="\n\n\t DIRECT ENDPOINT RECEIVED EXCHANGE:\t ${body.getClass().toString()}\n\tSETTING HEADERS AND FORWARDING FOR CXFRS CLIENT\n"/>
            <setHeader headerName="Content-Type" id="_setHeader1">
                <constant>text/xml; charset=utf-8</constant>
            </setHeader>
            <setHeader headerName="Accept" id="_setHeader2">
                <constant>text/xml; charset=utf-8</constant>
            </setHeader>
            <setHeader headerName="CamelHTTPMethod" id="_setHeader3">
                <constant>POST</constant>
            </setHeader>
            <setHeader headerName="CamelCxfRsUsingHttpAPI" id="_setHeader5">
                <constant>True</constant>
            </setHeader>
            <choice id="_choice1">
                <when id="_when_add_request">
                    <simple>${in.header.type} == 'add'</simple>
                    <setHeader headerName="CamelHTTPPath" id="_setHeader4">
                        <constant>/PersonEJB/addSystemRecordRequest</constant>
                    </setHeader>
                </when>
                <when id="_when_update_request">
                    <simple>${in.header.type} == 'update'</simple>
                    <setHeader headerName="CamelHTTPPath" id="_setHeader4">
                        <constant>/PersonEJB/updateSystemRecordRequest</constant>
                    </setHeader>
                </when>
                <when id="_when_search_request">
                    <simple>${in.header.type} == 'search'</simple>
                    <setHeader headerName="CamelHTTPPath" id="_setHeader4">
                        <constant>/PersonEJB/searchRequest</constant>
                    </setHeader>
                </when>
            </choice>
            <to id="_to4" uri="cxfrs:bean:customerRestServiceClient"/>
            <log id="_log6" message="\n\n##\n###\n####\nREST CLIENT MESSAGE SENT \n\t${headers}\n\nbody: \t${in.body}\n"/>
        </route>
    </camelContext>
</beans>
